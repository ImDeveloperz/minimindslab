{
  "levels": {
    "easy": {
      "title": "Easy Patterns",
      "description": "Simple coding patterns for beginners",
      "challenges": [
        {
          "id": "e1",
          "title": "Complete the Sequence",
          "description": "Place the missing number to complete the sequence",
          "patternType": "sequence",
          "challenge": ["print(1)", "print(2)", "print(___)", "print(4)"],
          "options": ["print(3)", "print(5)", "print(0)"],
          "correctAnswer": "print(3)",
          "hint": "Look for the counting pattern!",
          "explanation": "In programming, we often need to follow number sequences. Here, we're counting up by 1 each time."
        },
        {
          "id": "e2",
          "title": "Simple Loop",
          "description": "Complete the loop to count from 1 to 3",
          "patternType": "loop",
          "challenge": ["for i in range(1, 4):", "    print(___)"],
          "options": ["i", "i+1", "\"Hello\""],
          "correctAnswer": "i",
          "hint": "The variable 'i' holds the current value in the loop!",
          "explanation": "In a 'for' loop, we use a variable (like 'i') to keep track of where we are in the loop."
        },
        {
          "id": "e3",
          "title": "If Statement",
          "description": "Complete the if statement to check if x is greater than 5",
          "patternType": "conditional",
          "challenge": ["x = 7", "if ___ :", "    print(\"x is big!\")"],
          "options": ["x > 5", "x < 5", "x == 5"],
          "correctAnswer": "x > 5",
          "hint": "We want to check if x is bigger than 5!",
          "explanation": "Conditional statements let our programs make decisions. The '>' symbol checks if a value is greater than another."
        }
      ]
    },
    "medium": {
      "title": "Medium Patterns",
      "description": "More complex patterns for growing coders",
      "challenges": [
        {
          "id": "m1",
          "title": "Nested Loop",
          "description": "Complete the nested loop pattern",
          "patternType": "loop",
          "challenge": ["for i in range(3):", "    for j in range(2):", "        print(___)", "    print(\"Next row\")"],
          "options": ["i + j", "i * j", "\"X\""],
          "correctAnswer": "i + j",
          "hint": "We want to combine the values of i and j!",
          "explanation": "Nested loops are loops inside loops. We can use both variables (i and j) to create interesting patterns."
        },
        {
          "id": "m2",
          "title": "If-Else Chain",
          "description": "Complete the if-else chain to categorize scores",
          "patternType": "conditional",
          "challenge": ["score = 85", "if score > 90:", "    print(\"Excellent!\")", "___ score > 80:", "    print(\"Great job!\")"],
          "options": ["elif", "if", "else if"],
          "correctAnswer": "elif",
          "hint": "We need to check another condition after the first if!",
          "explanation": "'elif' means 'else if' and helps us check multiple conditions in sequence."
        },
        {
          "id": "m3",
          "title": "Function Pattern",
          "description": "Complete the function to add two numbers",
          "patternType": "function",
          "challenge": ["def add_numbers(a, b):", "    return ___", "result = add_numbers(5, 3)", "print(result)"],
          "options": ["a + b", "a - b", "a * b"],
          "correctAnswer": "a + b",
          "hint": "We want to combine the values with addition!",
          "explanation": "Functions let us package code for reuse. The 'return' statement gives back the function's result."
        }
      ]
    },
    "hard": {
      "title": "Hard Patterns",
      "description": "Advanced patterns for coding masters",
      "challenges": [
        {
          "id": "h1",
          "title": "List Comprehension",
          "description": "Complete the list comprehension to get even numbers",
          "patternType": "comprehension",
          "challenge": ["numbers = [1, 2, 3, 4, 5, 6]", "evens = [n for n in numbers if ___]", "print(evens)"],
          "options": ["n % 2 == 0", "n > 3", "n + 1"],
          "correctAnswer": "n % 2 == 0",
          "hint": "The modulo (%) operator helps us find even numbers!",
          "explanation": "List comprehensions let us create lists with a single line of code. The modulo operator (%) returns the remainder after division."
        },
        {
          "id": "h2",
          "title": "Recursive Pattern",
          "description": "Complete the recursive function to calculate factorial",
          "patternType": "recursion",
          "challenge": ["def factorial(n):", "    if n <= 1:", "        return 1", "    else:", "        return n * ___"],
          "options": ["factorial(n-1)", "factorial(n+1)", "n"],
          "correctAnswer": "factorial(n-1)",
          "hint": "We need to call the same function with a smaller number!",
          "explanation": "Recursion is when a function calls itself. This is perfect for mathematical operations like factorial!"
        },
        {
          "id": "h3",
          "title": "Error Handling",
          "description": "Complete the try/except block to handle division by zero",
          "patternType": "exception",
          "challenge": ["def safe_divide(a, b):", "    try:", "        return a / b", "    except ___:", "        return \"Cannot divide by zero\""],
          "options": ["ZeroDivisionError", "ValueError", "TypeError"],
          "correctAnswer": "ZeroDivisionError",
          "hint": "What error happens when you divide by zero?",
          "explanation": "Error handling lets our programs recover gracefully when problems occur, like when someone tries to divide by zero."
        }
      ]
    }
  }
}